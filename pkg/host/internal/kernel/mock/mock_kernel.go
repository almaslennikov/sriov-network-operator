// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_kernel is a generated GoMock package.
package mock_kernel

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ghw "github.com/jaypipes/ghw"
	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
	store "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/host/store"
	types "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/host/types"
	netlink "github.com/vishvananda/netlink"
)

// MockKernelInterface is a mock of KernelInterface interface.
type MockKernelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKernelInterfaceMockRecorder
}

// MockKernelInterfaceMockRecorder is the mock recorder for MockKernelInterface.
type MockKernelInterfaceMockRecorder struct {
	mock *MockKernelInterface
}

// NewMockKernelInterface creates a new mock instance.
func NewMockKernelInterface(ctrl *gomock.Controller) *MockKernelInterface {
	mock := &MockKernelInterface{ctrl: ctrl}
	mock.recorder = &MockKernelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelInterface) EXPECT() *MockKernelInterfaceMockRecorder {
	return m.recorder
}

// BindDefaultDriver mocks base method.
func (m *MockKernelInterface) BindDefaultDriver(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDefaultDriver", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDefaultDriver indicates an expected call of BindDefaultDriver.
func (mr *MockKernelInterfaceMockRecorder) BindDefaultDriver(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDefaultDriver", reflect.TypeOf((*MockKernelInterface)(nil).BindDefaultDriver), pciAddr)
}

// BindDpdkDriver mocks base method.
func (m *MockKernelInterface) BindDpdkDriver(pciAddr, driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDpdkDriver", pciAddr, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDpdkDriver indicates an expected call of BindDpdkDriver.
func (mr *MockKernelInterfaceMockRecorder) BindDpdkDriver(pciAddr, driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDpdkDriver", reflect.TypeOf((*MockKernelInterface)(nil).BindDpdkDriver), pciAddr, driver)
}

// BindDriverByBusAndDevice mocks base method.
func (m *MockKernelInterface) BindDriverByBusAndDevice(bus, device, driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDriverByBusAndDevice", bus, device, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDriverByBusAndDevice indicates an expected call of BindDriverByBusAndDevice.
func (mr *MockKernelInterfaceMockRecorder) BindDriverByBusAndDevice(bus, device, driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDriverByBusAndDevice", reflect.TypeOf((*MockKernelInterface)(nil).BindDriverByBusAndDevice), bus, device, driver)
}

// EnableRDMA mocks base method.
func (m *MockKernelInterface) EnableRDMA(conditionFilePath, serviceName, packageManager string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMA", conditionFilePath, serviceName, packageManager)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMA indicates an expected call of EnableRDMA.
func (mr *MockKernelInterfaceMockRecorder) EnableRDMA(conditionFilePath, serviceName, packageManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMA", reflect.TypeOf((*MockKernelInterface)(nil).EnableRDMA), conditionFilePath, serviceName, packageManager)
}

// EnableRDMAOnRHELMachine mocks base method.
func (m *MockKernelInterface) EnableRDMAOnRHELMachine() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMAOnRHELMachine")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMAOnRHELMachine indicates an expected call of EnableRDMAOnRHELMachine.
func (mr *MockKernelInterfaceMockRecorder) EnableRDMAOnRHELMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMAOnRHELMachine", reflect.TypeOf((*MockKernelInterface)(nil).EnableRDMAOnRHELMachine))
}

// GetCurrentKernelArgs mocks base method.
func (m *MockKernelInterface) GetCurrentKernelArgs() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKernelArgs")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKernelArgs indicates an expected call of GetCurrentKernelArgs.
func (mr *MockKernelInterfaceMockRecorder) GetCurrentKernelArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKernelArgs", reflect.TypeOf((*MockKernelInterface)(nil).GetCurrentKernelArgs))
}

// GetDriverByBusAndDevice mocks base method.
func (m *MockKernelInterface) GetDriverByBusAndDevice(bus, device string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByBusAndDevice", bus, device)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverByBusAndDevice indicates an expected call of GetDriverByBusAndDevice.
func (mr *MockKernelInterfaceMockRecorder) GetDriverByBusAndDevice(bus, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByBusAndDevice", reflect.TypeOf((*MockKernelInterface)(nil).GetDriverByBusAndDevice), bus, device)
}

// GetOSPrettyName mocks base method.
func (m *MockKernelInterface) GetOSPrettyName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSPrettyName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSPrettyName indicates an expected call of GetOSPrettyName.
func (mr *MockKernelInterfaceMockRecorder) GetOSPrettyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSPrettyName", reflect.TypeOf((*MockKernelInterface)(nil).GetOSPrettyName))
}

// HasDriver mocks base method.
func (m *MockKernelInterface) HasDriver(pciAddr string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDriver", pciAddr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// HasDriver indicates an expected call of HasDriver.
func (mr *MockKernelInterfaceMockRecorder) HasDriver(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDriver", reflect.TypeOf((*MockKernelInterface)(nil).HasDriver), pciAddr)
}

// InstallRDMA mocks base method.
func (m *MockKernelInterface) InstallRDMA(packageManager string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallRDMA", packageManager)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallRDMA indicates an expected call of InstallRDMA.
func (mr *MockKernelInterfaceMockRecorder) InstallRDMA(packageManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallRDMA", reflect.TypeOf((*MockKernelInterface)(nil).InstallRDMA), packageManager)
}

// IsCoreOS mocks base method.
func (m *MockKernelInterface) IsCoreOS() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCoreOS")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCoreOS indicates an expected call of IsCoreOS.
func (mr *MockKernelInterfaceMockRecorder) IsCoreOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCoreOS", reflect.TypeOf((*MockKernelInterface)(nil).IsCoreOS))
}

// IsKernelArgsSet mocks base method.
func (m *MockKernelInterface) IsKernelArgsSet(cmdLine, karg string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelArgsSet", cmdLine, karg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelArgsSet indicates an expected call of IsKernelArgsSet.
func (mr *MockKernelInterfaceMockRecorder) IsKernelArgsSet(cmdLine, karg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelArgsSet", reflect.TypeOf((*MockKernelInterface)(nil).IsKernelArgsSet), cmdLine, karg)
}

// IsKernelLockdownMode mocks base method.
func (m *MockKernelInterface) IsKernelLockdownMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelLockdownMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelLockdownMode indicates an expected call of IsKernelLockdownMode.
func (mr *MockKernelInterfaceMockRecorder) IsKernelLockdownMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelLockdownMode", reflect.TypeOf((*MockKernelInterface)(nil).IsKernelLockdownMode))
}

// IsKernelModuleLoaded mocks base method.
func (m *MockKernelInterface) IsKernelModuleLoaded(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelModuleLoaded", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKernelModuleLoaded indicates an expected call of IsKernelModuleLoaded.
func (mr *MockKernelInterfaceMockRecorder) IsKernelModuleLoaded(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelModuleLoaded", reflect.TypeOf((*MockKernelInterface)(nil).IsKernelModuleLoaded), name)
}

// IsRHELSystem mocks base method.
func (m *MockKernelInterface) IsRHELSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRHELSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRHELSystem indicates an expected call of IsRHELSystem.
func (mr *MockKernelInterfaceMockRecorder) IsRHELSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRHELSystem", reflect.TypeOf((*MockKernelInterface)(nil).IsRHELSystem))
}

// IsUbuntuSystem mocks base method.
func (m *MockKernelInterface) IsUbuntuSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUbuntuSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUbuntuSystem indicates an expected call of IsUbuntuSystem.
func (mr *MockKernelInterfaceMockRecorder) IsUbuntuSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUbuntuSystem", reflect.TypeOf((*MockKernelInterface)(nil).IsUbuntuSystem))
}

// LoadKernelModule mocks base method.
func (m *MockKernelInterface) LoadKernelModule(name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadKernelModule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockKernelInterfaceMockRecorder) LoadKernelModule(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockKernelInterface)(nil).LoadKernelModule), varargs...)
}

// RdmaIsLoaded mocks base method.
func (m *MockKernelInterface) RdmaIsLoaded() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RdmaIsLoaded")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaIsLoaded indicates an expected call of RdmaIsLoaded.
func (mr *MockKernelInterfaceMockRecorder) RdmaIsLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaIsLoaded", reflect.TypeOf((*MockKernelInterface)(nil).RdmaIsLoaded))
}

// RebindVfToDefaultDriver mocks base method.
func (m *MockKernelInterface) RebindVfToDefaultDriver(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebindVfToDefaultDriver", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebindVfToDefaultDriver indicates an expected call of RebindVfToDefaultDriver.
func (mr *MockKernelInterfaceMockRecorder) RebindVfToDefaultDriver(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebindVfToDefaultDriver", reflect.TypeOf((*MockKernelInterface)(nil).RebindVfToDefaultDriver), pciAddr)
}

// ReloadDriver mocks base method.
func (m *MockKernelInterface) ReloadDriver(driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadDriver", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadDriver indicates an expected call of ReloadDriver.
func (mr *MockKernelInterfaceMockRecorder) ReloadDriver(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadDriver", reflect.TypeOf((*MockKernelInterface)(nil).ReloadDriver), driver)
}

// TriggerUdevEvent mocks base method.
func (m *MockKernelInterface) TriggerUdevEvent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerUdevEvent")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerUdevEvent indicates an expected call of TriggerUdevEvent.
func (mr *MockKernelInterfaceMockRecorder) TriggerUdevEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerUdevEvent", reflect.TypeOf((*MockKernelInterface)(nil).TriggerUdevEvent))
}

// TryEnableRdma mocks base method.
func (m *MockKernelInterface) TryEnableRdma() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryEnableRdma")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryEnableRdma indicates an expected call of TryEnableRdma.
func (mr *MockKernelInterfaceMockRecorder) TryEnableRdma() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableRdma", reflect.TypeOf((*MockKernelInterface)(nil).TryEnableRdma))
}

// TryEnableTun mocks base method.
func (m *MockKernelInterface) TryEnableTun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableTun")
}

// TryEnableTun indicates an expected call of TryEnableTun.
func (mr *MockKernelInterfaceMockRecorder) TryEnableTun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableTun", reflect.TypeOf((*MockKernelInterface)(nil).TryEnableTun))
}

// TryEnableVhostNet mocks base method.
func (m *MockKernelInterface) TryEnableVhostNet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableVhostNet")
}

// TryEnableVhostNet indicates an expected call of TryEnableVhostNet.
func (mr *MockKernelInterfaceMockRecorder) TryEnableVhostNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableVhostNet", reflect.TypeOf((*MockKernelInterface)(nil).TryEnableVhostNet))
}

// Unbind mocks base method.
func (m *MockKernelInterface) Unbind(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unbind indicates an expected call of Unbind.
func (mr *MockKernelInterfaceMockRecorder) Unbind(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockKernelInterface)(nil).Unbind), pciAddr)
}

// UnbindDriverByBusAndDevice mocks base method.
func (m *MockKernelInterface) UnbindDriverByBusAndDevice(bus, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverByBusAndDevice", bus, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverByBusAndDevice indicates an expected call of UnbindDriverByBusAndDevice.
func (mr *MockKernelInterfaceMockRecorder) UnbindDriverByBusAndDevice(bus, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverByBusAndDevice", reflect.TypeOf((*MockKernelInterface)(nil).UnbindDriverByBusAndDevice), bus, device)
}

// UnbindDriverIfNeeded mocks base method.
func (m *MockKernelInterface) UnbindDriverIfNeeded(pciAddr string, isRdma bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverIfNeeded", pciAddr, isRdma)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverIfNeeded indicates an expected call of UnbindDriverIfNeeded.
func (mr *MockKernelInterfaceMockRecorder) UnbindDriverIfNeeded(pciAddr, isRdma interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverIfNeeded", reflect.TypeOf((*MockKernelInterface)(nil).UnbindDriverIfNeeded), pciAddr, isRdma)
}

// MockNetworkInterface is a mock of NetworkInterface interface.
type MockNetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkInterfaceMockRecorder
}

// MockNetworkInterfaceMockRecorder is the mock recorder for MockNetworkInterface.
type MockNetworkInterfaceMockRecorder struct {
	mock *MockNetworkInterface
}

// NewMockNetworkInterface creates a new mock instance.
func NewMockNetworkInterface(ctrl *gomock.Controller) *MockNetworkInterface {
	mock := &MockNetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkInterface) EXPECT() *MockNetworkInterfaceMockRecorder {
	return m.recorder
}

// EnableHwTcOffload mocks base method.
func (m *MockNetworkInterface) EnableHwTcOffload(ifaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableHwTcOffload", ifaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableHwTcOffload indicates an expected call of EnableHwTcOffload.
func (mr *MockNetworkInterfaceMockRecorder) EnableHwTcOffload(ifaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableHwTcOffload", reflect.TypeOf((*MockNetworkInterface)(nil).EnableHwTcOffload), ifaceName)
}

// GetDevlinkDeviceParam mocks base method.
func (m *MockNetworkInterface) GetDevlinkDeviceParam(pciAddr, paramName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevlinkDeviceParam", pciAddr, paramName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevlinkDeviceParam indicates an expected call of GetDevlinkDeviceParam.
func (mr *MockNetworkInterfaceMockRecorder) GetDevlinkDeviceParam(pciAddr, paramName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevlinkDeviceParam", reflect.TypeOf((*MockNetworkInterface)(nil).GetDevlinkDeviceParam), pciAddr, paramName)
}

// GetNetDevLinkSpeed mocks base method.
func (m *MockNetworkInterface) GetNetDevLinkSpeed(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevLinkSpeed", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevLinkSpeed indicates an expected call of GetNetDevLinkSpeed.
func (mr *MockNetworkInterfaceMockRecorder) GetNetDevLinkSpeed(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevLinkSpeed", reflect.TypeOf((*MockNetworkInterface)(nil).GetNetDevLinkSpeed), name)
}

// GetNetDevMac mocks base method.
func (m *MockNetworkInterface) GetNetDevMac(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevMac", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevMac indicates an expected call of GetNetDevMac.
func (mr *MockNetworkInterfaceMockRecorder) GetNetDevMac(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevMac", reflect.TypeOf((*MockNetworkInterface)(nil).GetNetDevMac), name)
}

// GetNetdevMTU mocks base method.
func (m *MockNetworkInterface) GetNetdevMTU(pciAddr string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetdevMTU", pciAddr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNetdevMTU indicates an expected call of GetNetdevMTU.
func (mr *MockNetworkInterfaceMockRecorder) GetNetdevMTU(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetdevMTU", reflect.TypeOf((*MockNetworkInterface)(nil).GetNetdevMTU), pciAddr)
}

// GetPciAddressFromInterfaceName mocks base method.
func (m *MockNetworkInterface) GetPciAddressFromInterfaceName(interfaceName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPciAddressFromInterfaceName", interfaceName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPciAddressFromInterfaceName indicates an expected call of GetPciAddressFromInterfaceName.
func (mr *MockNetworkInterfaceMockRecorder) GetPciAddressFromInterfaceName(interfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPciAddressFromInterfaceName", reflect.TypeOf((*MockNetworkInterface)(nil).GetPciAddressFromInterfaceName), interfaceName)
}

// GetPhysPortName mocks base method.
func (m *MockNetworkInterface) GetPhysPortName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysPortName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhysPortName indicates an expected call of GetPhysPortName.
func (mr *MockNetworkInterfaceMockRecorder) GetPhysPortName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysPortName", reflect.TypeOf((*MockNetworkInterface)(nil).GetPhysPortName), name)
}

// GetPhysSwitchID mocks base method.
func (m *MockNetworkInterface) GetPhysSwitchID(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysSwitchID", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhysSwitchID indicates an expected call of GetPhysSwitchID.
func (mr *MockNetworkInterfaceMockRecorder) GetPhysSwitchID(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysSwitchID", reflect.TypeOf((*MockNetworkInterface)(nil).GetPhysSwitchID), name)
}

// IsSwitchdev mocks base method.
func (m *MockNetworkInterface) IsSwitchdev(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSwitchdev", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSwitchdev indicates an expected call of IsSwitchdev.
func (mr *MockNetworkInterfaceMockRecorder) IsSwitchdev(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSwitchdev", reflect.TypeOf((*MockNetworkInterface)(nil).IsSwitchdev), name)
}

// SetDevlinkDeviceParam mocks base method.
func (m *MockNetworkInterface) SetDevlinkDeviceParam(pciAddr, paramName, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevlinkDeviceParam", pciAddr, paramName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevlinkDeviceParam indicates an expected call of SetDevlinkDeviceParam.
func (mr *MockNetworkInterfaceMockRecorder) SetDevlinkDeviceParam(pciAddr, paramName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevlinkDeviceParam", reflect.TypeOf((*MockNetworkInterface)(nil).SetDevlinkDeviceParam), pciAddr, paramName, value)
}

// SetNetdevMTU mocks base method.
func (m *MockNetworkInterface) SetNetdevMTU(pciAddr string, mtu int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNetdevMTU", pciAddr, mtu)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNetdevMTU indicates an expected call of SetNetdevMTU.
func (mr *MockNetworkInterfaceMockRecorder) SetNetdevMTU(pciAddr, mtu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetdevMTU", reflect.TypeOf((*MockNetworkInterface)(nil).SetNetdevMTU), pciAddr, mtu)
}

// TryGetInterfaceName mocks base method.
func (m *MockNetworkInterface) TryGetInterfaceName(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryGetInterfaceName", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryGetInterfaceName indicates an expected call of TryGetInterfaceName.
func (mr *MockNetworkInterfaceMockRecorder) TryGetInterfaceName(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetInterfaceName", reflect.TypeOf((*MockNetworkInterface)(nil).TryGetInterfaceName), pciAddr)
}

// TryToGetVirtualInterfaceName mocks base method.
func (m *MockNetworkInterface) TryToGetVirtualInterfaceName(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToGetVirtualInterfaceName", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryToGetVirtualInterfaceName indicates an expected call of TryToGetVirtualInterfaceName.
func (mr *MockNetworkInterfaceMockRecorder) TryToGetVirtualInterfaceName(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToGetVirtualInterfaceName", reflect.TypeOf((*MockNetworkInterface)(nil).TryToGetVirtualInterfaceName), pciAddr)
}

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CompareServices mocks base method.
func (m *MockServiceInterface) CompareServices(serviceA, serviceB *types.Service) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareServices", serviceA, serviceB)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareServices indicates an expected call of CompareServices.
func (mr *MockServiceInterfaceMockRecorder) CompareServices(serviceA, serviceB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareServices", reflect.TypeOf((*MockServiceInterface)(nil).CompareServices), serviceA, serviceB)
}

// EnableService mocks base method.
func (m *MockServiceInterface) EnableService(service *types.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableService", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableService indicates an expected call of EnableService.
func (mr *MockServiceInterfaceMockRecorder) EnableService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableService", reflect.TypeOf((*MockServiceInterface)(nil).EnableService), service)
}

// IsServiceEnabled mocks base method.
func (m *MockServiceInterface) IsServiceEnabled(servicePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceEnabled", servicePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceEnabled indicates an expected call of IsServiceEnabled.
func (mr *MockServiceInterfaceMockRecorder) IsServiceEnabled(servicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceEnabled", reflect.TypeOf((*MockServiceInterface)(nil).IsServiceEnabled), servicePath)
}

// IsServiceExist mocks base method.
func (m *MockServiceInterface) IsServiceExist(servicePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceExist", servicePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceExist indicates an expected call of IsServiceExist.
func (mr *MockServiceInterfaceMockRecorder) IsServiceExist(servicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceExist", reflect.TypeOf((*MockServiceInterface)(nil).IsServiceExist), servicePath)
}

// ReadService mocks base method.
func (m *MockServiceInterface) ReadService(servicePath string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadService", servicePath)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService.
func (mr *MockServiceInterfaceMockRecorder) ReadService(servicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockServiceInterface)(nil).ReadService), servicePath)
}

// ReadServiceInjectionManifestFile mocks base method.
func (m *MockServiceInterface) ReadServiceInjectionManifestFile(path string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceInjectionManifestFile", path)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceInjectionManifestFile indicates an expected call of ReadServiceInjectionManifestFile.
func (mr *MockServiceInterfaceMockRecorder) ReadServiceInjectionManifestFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceInjectionManifestFile", reflect.TypeOf((*MockServiceInterface)(nil).ReadServiceInjectionManifestFile), path)
}

// ReadServiceManifestFile mocks base method.
func (m *MockServiceInterface) ReadServiceManifestFile(path string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifestFile", path)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifestFile indicates an expected call of ReadServiceManifestFile.
func (mr *MockServiceInterfaceMockRecorder) ReadServiceManifestFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifestFile", reflect.TypeOf((*MockServiceInterface)(nil).ReadServiceManifestFile), path)
}

// UpdateSystemService mocks base method.
func (m *MockServiceInterface) UpdateSystemService(serviceObj *types.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemService", serviceObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSystemService indicates an expected call of UpdateSystemService.
func (mr *MockServiceInterfaceMockRecorder) UpdateSystemService(serviceObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemService", reflect.TypeOf((*MockServiceInterface)(nil).UpdateSystemService), serviceObj)
}

// MockSriovInterface is a mock of SriovInterface interface.
type MockSriovInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSriovInterfaceMockRecorder
}

// MockSriovInterfaceMockRecorder is the mock recorder for MockSriovInterface.
type MockSriovInterfaceMockRecorder struct {
	mock *MockSriovInterface
}

// NewMockSriovInterface creates a new mock instance.
func NewMockSriovInterface(ctrl *gomock.Controller) *MockSriovInterface {
	mock := &MockSriovInterface{ctrl: ctrl}
	mock.recorder = &MockSriovInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSriovInterface) EXPECT() *MockSriovInterfaceMockRecorder {
	return m.recorder
}

// ConfigSriovDeviceVirtual mocks base method.
func (m *MockSriovInterface) ConfigSriovDeviceVirtual(iface *v1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovDeviceVirtual", iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovDeviceVirtual indicates an expected call of ConfigSriovDeviceVirtual.
func (mr *MockSriovInterfaceMockRecorder) ConfigSriovDeviceVirtual(iface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovDeviceVirtual", reflect.TypeOf((*MockSriovInterface)(nil).ConfigSriovDeviceVirtual), iface)
}

// ConfigSriovInterfaces mocks base method.
func (m *MockSriovInterface) ConfigSriovInterfaces(storeManager store.ManagerInterface, interfaces []v1.Interface, ifaceStatuses []v1.InterfaceExt, skipVFConfiguration bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovInterfaces", storeManager, interfaces, ifaceStatuses, skipVFConfiguration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovInterfaces indicates an expected call of ConfigSriovInterfaces.
func (mr *MockSriovInterfaceMockRecorder) ConfigSriovInterfaces(storeManager, interfaces, ifaceStatuses, skipVFConfiguration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovInterfaces", reflect.TypeOf((*MockSriovInterface)(nil).ConfigSriovInterfaces), storeManager, interfaces, ifaceStatuses, skipVFConfiguration)
}

// DiscoverSriovDevices mocks base method.
func (m *MockSriovInterface) DiscoverSriovDevices(storeManager store.ManagerInterface) ([]v1.InterfaceExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSriovDevices", storeManager)
	ret0, _ := ret[0].([]v1.InterfaceExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSriovDevices indicates an expected call of DiscoverSriovDevices.
func (mr *MockSriovInterfaceMockRecorder) DiscoverSriovDevices(storeManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSriovDevices", reflect.TypeOf((*MockSriovInterface)(nil).DiscoverSriovDevices), storeManager)
}

// GetLinkType mocks base method.
func (m *MockSriovInterface) GetLinkType(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkType", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLinkType indicates an expected call of GetLinkType.
func (mr *MockSriovInterfaceMockRecorder) GetLinkType(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkType", reflect.TypeOf((*MockSriovInterface)(nil).GetLinkType), name)
}

// GetNicSriovMode mocks base method.
func (m *MockSriovInterface) GetNicSriovMode(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNicSriovMode", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNicSriovMode indicates an expected call of GetNicSriovMode.
func (mr *MockSriovInterfaceMockRecorder) GetNicSriovMode(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNicSriovMode", reflect.TypeOf((*MockSriovInterface)(nil).GetNicSriovMode), pciAddr)
}

// GetVfInfo mocks base method.
func (m *MockSriovInterface) GetVfInfo(pciAddr string, devices []*ghw.PCIDevice) v1.VirtualFunction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVfInfo", pciAddr, devices)
	ret0, _ := ret[0].(v1.VirtualFunction)
	return ret0
}

// GetVfInfo indicates an expected call of GetVfInfo.
func (mr *MockSriovInterfaceMockRecorder) GetVfInfo(pciAddr, devices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVfInfo", reflect.TypeOf((*MockSriovInterface)(nil).GetVfInfo), pciAddr, devices)
}

// ResetSriovDevice mocks base method.
func (m *MockSriovInterface) ResetSriovDevice(ifaceStatus v1.InterfaceExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSriovDevice", ifaceStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetSriovDevice indicates an expected call of ResetSriovDevice.
func (mr *MockSriovInterfaceMockRecorder) ResetSriovDevice(ifaceStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSriovDevice", reflect.TypeOf((*MockSriovInterface)(nil).ResetSriovDevice), ifaceStatus)
}

// SetNicSriovMode mocks base method.
func (m *MockSriovInterface) SetNicSriovMode(pciAddr, mode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNicSriovMode", pciAddr, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNicSriovMode indicates an expected call of SetNicSriovMode.
func (mr *MockSriovInterfaceMockRecorder) SetNicSriovMode(pciAddr, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNicSriovMode", reflect.TypeOf((*MockSriovInterface)(nil).SetNicSriovMode), pciAddr, mode)
}

// SetSriovNumVfs mocks base method.
func (m *MockSriovInterface) SetSriovNumVfs(pciAddr string, numVfs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSriovNumVfs", pciAddr, numVfs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSriovNumVfs indicates an expected call of SetSriovNumVfs.
func (mr *MockSriovInterfaceMockRecorder) SetSriovNumVfs(pciAddr, numVfs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSriovNumVfs", reflect.TypeOf((*MockSriovInterface)(nil).SetSriovNumVfs), pciAddr, numVfs)
}

// SetVfAdminMac mocks base method.
func (m *MockSriovInterface) SetVfAdminMac(vfAddr string, pfLink, vfLink netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVfAdminMac", vfAddr, pfLink, vfLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVfAdminMac indicates an expected call of SetVfAdminMac.
func (mr *MockSriovInterfaceMockRecorder) SetVfAdminMac(vfAddr, pfLink, vfLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVfAdminMac", reflect.TypeOf((*MockSriovInterface)(nil).SetVfAdminMac), vfAddr, pfLink, vfLink)
}

// VFIsReady mocks base method.
func (m *MockSriovInterface) VFIsReady(pciAddr string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VFIsReady", pciAddr)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VFIsReady indicates an expected call of VFIsReady.
func (mr *MockSriovInterfaceMockRecorder) VFIsReady(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VFIsReady", reflect.TypeOf((*MockSriovInterface)(nil).VFIsReady), pciAddr)
}

// MockUdevInterface is a mock of UdevInterface interface.
type MockUdevInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUdevInterfaceMockRecorder
}

// MockUdevInterfaceMockRecorder is the mock recorder for MockUdevInterface.
type MockUdevInterfaceMockRecorder struct {
	mock *MockUdevInterface
}

// NewMockUdevInterface creates a new mock instance.
func NewMockUdevInterface(ctrl *gomock.Controller) *MockUdevInterface {
	mock := &MockUdevInterface{ctrl: ctrl}
	mock.recorder = &MockUdevInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUdevInterface) EXPECT() *MockUdevInterfaceMockRecorder {
	return m.recorder
}

// AddDisableNMUdevRule mocks base method.
func (m *MockUdevInterface) AddDisableNMUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisableNMUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDisableNMUdevRule indicates an expected call of AddDisableNMUdevRule.
func (mr *MockUdevInterfaceMockRecorder) AddDisableNMUdevRule(pfPciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisableNMUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).AddDisableNMUdevRule), pfPciAddress)
}

// AddPersistPFNameUdevRule mocks base method.
func (m *MockUdevInterface) AddPersistPFNameUdevRule(pfPciAddress, pfName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPersistPFNameUdevRule", pfPciAddress, pfName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPersistPFNameUdevRule indicates an expected call of AddPersistPFNameUdevRule.
func (mr *MockUdevInterfaceMockRecorder) AddPersistPFNameUdevRule(pfPciAddress, pfName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPersistPFNameUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).AddPersistPFNameUdevRule), pfPciAddress, pfName)
}

// AddVfRepresentorUdevRule mocks base method.
func (m *MockUdevInterface) AddVfRepresentorUdevRule(pfPciAddress, pfName, pfSwitchID, pfSwitchPort string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVfRepresentorUdevRule", pfPciAddress, pfName, pfSwitchID, pfSwitchPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVfRepresentorUdevRule indicates an expected call of AddVfRepresentorUdevRule.
func (mr *MockUdevInterfaceMockRecorder) AddVfRepresentorUdevRule(pfPciAddress, pfName, pfSwitchID, pfSwitchPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVfRepresentorUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).AddVfRepresentorUdevRule), pfPciAddress, pfName, pfSwitchID, pfSwitchPort)
}

// LoadUdevRules mocks base method.
func (m *MockUdevInterface) LoadUdevRules() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUdevRules")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadUdevRules indicates an expected call of LoadUdevRules.
func (mr *MockUdevInterfaceMockRecorder) LoadUdevRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUdevRules", reflect.TypeOf((*MockUdevInterface)(nil).LoadUdevRules))
}

// PrepareNMUdevRule mocks base method.
func (m *MockUdevInterface) PrepareNMUdevRule(supportedVfIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNMUdevRule", supportedVfIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareNMUdevRule indicates an expected call of PrepareNMUdevRule.
func (mr *MockUdevInterfaceMockRecorder) PrepareNMUdevRule(supportedVfIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNMUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).PrepareNMUdevRule), supportedVfIds)
}

// PrepareVFRepUdevRule mocks base method.
func (m *MockUdevInterface) PrepareVFRepUdevRule() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareVFRepUdevRule")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareVFRepUdevRule indicates an expected call of PrepareVFRepUdevRule.
func (mr *MockUdevInterfaceMockRecorder) PrepareVFRepUdevRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareVFRepUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).PrepareVFRepUdevRule))
}

// RemoveDisableNMUdevRule mocks base method.
func (m *MockUdevInterface) RemoveDisableNMUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDisableNMUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDisableNMUdevRule indicates an expected call of RemoveDisableNMUdevRule.
func (mr *MockUdevInterfaceMockRecorder) RemoveDisableNMUdevRule(pfPciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDisableNMUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).RemoveDisableNMUdevRule), pfPciAddress)
}

// RemovePersistPFNameUdevRule mocks base method.
func (m *MockUdevInterface) RemovePersistPFNameUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePersistPFNameUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePersistPFNameUdevRule indicates an expected call of RemovePersistPFNameUdevRule.
func (mr *MockUdevInterfaceMockRecorder) RemovePersistPFNameUdevRule(pfPciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePersistPFNameUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).RemovePersistPFNameUdevRule), pfPciAddress)
}

// RemoveVfRepresentorUdevRule mocks base method.
func (m *MockUdevInterface) RemoveVfRepresentorUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVfRepresentorUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVfRepresentorUdevRule indicates an expected call of RemoveVfRepresentorUdevRule.
func (mr *MockUdevInterfaceMockRecorder) RemoveVfRepresentorUdevRule(pfPciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVfRepresentorUdevRule", reflect.TypeOf((*MockUdevInterface)(nil).RemoveVfRepresentorUdevRule), pfPciAddress)
}

// MockVdpaInterface is a mock of VdpaInterface interface.
type MockVdpaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVdpaInterfaceMockRecorder
}

// MockVdpaInterfaceMockRecorder is the mock recorder for MockVdpaInterface.
type MockVdpaInterfaceMockRecorder struct {
	mock *MockVdpaInterface
}

// NewMockVdpaInterface creates a new mock instance.
func NewMockVdpaInterface(ctrl *gomock.Controller) *MockVdpaInterface {
	mock := &MockVdpaInterface{ctrl: ctrl}
	mock.recorder = &MockVdpaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVdpaInterface) EXPECT() *MockVdpaInterfaceMockRecorder {
	return m.recorder
}

// CreateVDPADevice mocks base method.
func (m *MockVdpaInterface) CreateVDPADevice(pciAddr, vdpaType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVDPADevice", pciAddr, vdpaType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVDPADevice indicates an expected call of CreateVDPADevice.
func (mr *MockVdpaInterfaceMockRecorder) CreateVDPADevice(pciAddr, vdpaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVDPADevice", reflect.TypeOf((*MockVdpaInterface)(nil).CreateVDPADevice), pciAddr, vdpaType)
}

// DeleteVDPADevice mocks base method.
func (m *MockVdpaInterface) DeleteVDPADevice(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVDPADevice", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVDPADevice indicates an expected call of DeleteVDPADevice.
func (mr *MockVdpaInterfaceMockRecorder) DeleteVDPADevice(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVDPADevice", reflect.TypeOf((*MockVdpaInterface)(nil).DeleteVDPADevice), pciAddr)
}

// DiscoverVDPAType mocks base method.
func (m *MockVdpaInterface) DiscoverVDPAType(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverVDPAType", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// DiscoverVDPAType indicates an expected call of DiscoverVDPAType.
func (mr *MockVdpaInterfaceMockRecorder) DiscoverVDPAType(pciAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverVDPAType", reflect.TypeOf((*MockVdpaInterface)(nil).DiscoverVDPAType), pciAddr)
}

// MockInfinibandInterface is a mock of InfinibandInterface interface.
type MockInfinibandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInfinibandInterfaceMockRecorder
}

// MockInfinibandInterfaceMockRecorder is the mock recorder for MockInfinibandInterface.
type MockInfinibandInterfaceMockRecorder struct {
	mock *MockInfinibandInterface
}

// NewMockInfinibandInterface creates a new mock instance.
func NewMockInfinibandInterface(ctrl *gomock.Controller) *MockInfinibandInterface {
	mock := &MockInfinibandInterface{ctrl: ctrl}
	mock.recorder = &MockInfinibandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfinibandInterface) EXPECT() *MockInfinibandInterfaceMockRecorder {
	return m.recorder
}

// ConfigureVfGUID mocks base method.
func (m *MockInfinibandInterface) ConfigureVfGUID(vfAddr, pfAddr string, vfID int, pfLink netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVfGUID", vfAddr, pfAddr, vfID, pfLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureVfGUID indicates an expected call of ConfigureVfGUID.
func (mr *MockInfinibandInterfaceMockRecorder) ConfigureVfGUID(vfAddr, pfAddr, vfID, pfLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVfGUID", reflect.TypeOf((*MockInfinibandInterface)(nil).ConfigureVfGUID), vfAddr, pfAddr, vfID, pfLink)
}
